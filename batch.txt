try {
    Connection conn = DriverManager.getConnection("jdbc:postgresql://localhost:5432/your_database", "your_username", "your_password");
    
    // Prepare the insert statement for the employees table
    PreparedStatement pstmt = conn.prepareStatement("INSERT INTO employees (emp_name, emp_salary) VALUES (?, ?)");
    
    // List of employee objects to insert
    List<Employee> employeeList = getEmployeeList(); // Your method to retrieve the list of employee objects
    
    // Disable auto-commit to start a transaction
    conn.setAutoCommit(false);
    
    // Iterate over the list and add batch for each employee
    for (Employee employee : employeeList) {
        pstmt.setString(1, employee.getName());
        pstmt.setDouble(2, employee.getSalary());
        
        // Add the parameters to the batch
        pstmt.addBatch();
    }
    
    // Execute the batch
    pstmt.executeBatch();
    
    // Commit the transaction
    conn.commit();
    
    // Close the connection
    conn.close();
} catch (SQLException e) {
    e.printStackTrace();
}

CREATE OR REPLACE PROCEDURE insert_employees(
    employee_data employee_type[]
)
LANGUAGE plpgsql
AS $$
BEGIN
    -- Perform batch insertion using FOREACH loop
    FOREACH emp_record IN ARRAY employee_data
    LOOP
        INSERT INTO employees (emp_name, emp_salary) VALUES (emp_record.name, emp_record.salary);
    END LOOP;
END;
$$;
try {
    Connection conn = DriverManager.getConnection("jdbc:postgresql://localhost:5432/your_database", "your_username", "your_password");
    
    // Prepare the call to the stored procedure
    CallableStatement callableStatement = conn.prepareCall("{call insert_employees(?)}");
    
    // Create an array or list of employee objects
    List<Employee> employeeList = getEmployeeList(); // Your method to retrieve the list of employee objects
    
    // Convert the list of employee objects to an array or other suitable format
    EmployeeType[] employeeArray = employeeList.stream()
                                              .map(emp -> new EmployeeType(emp.getName(), emp.getSalary()))
                                              .toArray(EmployeeType[]::new);
    
    // Set the input parameter for the stored procedure
    callableStatement.setArray(1, conn.createArrayOf("employee_type", employeeArray));
    
    // Execute the stored procedure
    callableStatement.execute();
    
    // Close the connection
    conn.close();
} catch (SQLException e) {
    e.printStackTrace();
}
