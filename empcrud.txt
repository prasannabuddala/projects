Employees.jsp

<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ page import="emp.Employee" %>
<%@ page import="java.util.*" %>

<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Employee CRUD</title>
     <style>
      <style>
    body {
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 0;
        background-color: #f4f4f4;
    }

    h2 {
        text-align: center;
        margin-top: 20px;
    }

    form {
        width: 80%;
        margin: 20px auto;
        padding: 20px;
        border: 1px solid #ddd;
        border-radius: 10px;
        text-align: center;
        background-color: #eee;
    }

    form input[type="text"] {
        width: 80%;
        padding: 8px;
        margin: 8px;
        border: 1px solid #ddd;
        border-radius: 5px;
        
        box-sizing: border-box;
    }

    button {
        padding: 10px 20px;
        cursor: pointer;
        background-color: #3498db;
        color: white;
        border: none;
        border-radius: 5px;
        margin: 10px;
    }

    button:hover {
        background-color: #45a049; 
    }

    table {
        width: 80%;
        margin: 20px auto;
        border-collapse: collapse;
    }

    th, td {
        padding: 8px;
        text-align: center;
        border: 1px solid #ddd;
        border-radius: 5px;
    }

    tr:nth-child(even) {
        background-color: #f2f2f2;
    }

    tr:hover {
        background-color: #fff;
    }

    #prevbutton, #nextButton {
        margin: 10px;
        padding: 10px 20px;
        cursor: pointer;
        background-color: #3498db;
        color: white;
        border: none;
        border-radius: 5px;
    }

    #prevbutton:hover, #nextButton:hover {
        background-color: #45a049;
    }
</style>

    </style>
</head>
<body>
    <h2 style="text-align:center">Employee Management</h2>

   
 <form action="crudserve" method="post">
        Employee ID: <input type="text" name="Empid"><br><br>
        Employee Name: <input type="text" name="Empname"><br><br>
        Job: <input type="text" name="job"><br><br>
        Department: <input type="text" name="Department"><br><br>
        Salary: <input type="text" name="Sal"><br><br>
 <button type ="submit" name="action" value="add">Add</button>
 <button type ="submit" name="action" value="delete">Delete</button>
 <button type ="submit" name="action" value="update">Update</button>

 </form>
 
  <center>
  <button type="button" id="firstbutton">Initial</button>
  <button type="button" id="lastbutton">Final</button>
  <button type="button" id="prevbutton">Previous</button> 
  <button id="nextButton" type="button">Next</button>
  <br><br>
  </center>

    <!-- Table to display employee records -->
    <table id="employeeTable" border="1">
        <tr>
            <th>Employee ID</th>
            <th>Employee Name</th>
            <th>Job</th>
            <th>Department</th>
            <th>Salary</th>
        </tr>
        <% 
            List<Employee> emp1 = (List<Employee>) request.getAttribute("ed");
            if (emp1 != null) {
                for (Employee emp2 : emp1) {
        %>
        <tr id="data">
            <td><%= emp2.getEmpid() %></td>
            <td><%= emp2.getEmp_name() %></td>
            <td><%= emp2.getJob() %></td>
            <td><%= emp2.getDept()%></td>
            <td><%= emp2.getSalary() %></td>
            
            
        </tr>
        <%
                }
            }
        %>
    </table>

<script>
var rowIndex=1;
var index = 1; 
var rows; 

document.addEventListener("DOMContentLoaded", function() {
    var table = document.getElementById("employeeTable");
    rows = table.getElementsByTagName("tr");

   
    function updateFormFields(row, rowIndex) {
        var cells = row.getElementsByTagName("td");
        document.getElementsByName("Empname")[0].value = cells[1].innerHTML;
        document.getElementsByName("Empid")[0].value = cells[0].innerHTML;
        document.getElementsByName("job")[0].value = cells[2].innerHTML;
        document.getElementsByName("Department")[0].value = cells[3].innerHTML;
        document.getElementsByName("Sal")[0].value = cells[4].innerHTML;
        index = rowIndex; 
    }

   
    for (var i = 1; i < rows.length; i++) {
        rows[i].addEventListener("click", function() {
            rowIndex = Array.prototype.indexOf.call(rows, this);
            updateFormFields(this, rowIndex); 
        });
    }

    
    function moveToNext() {
        if (rowIndex < rows.length - 1) {
        	rowIndex++;
            updateFormFields(rows[rowIndex], rowIndex);
        }
    }

    
    function moveToPrev() {
        if (rowIndex > 1) {
        	rowIndex--;
            updateFormFields(rows[rowIndex], rowIndex);
        }
    }
    function showFirst() {
        updateFormFields(rows[1], 1);
        
    }

    function showLast() {
        updateFormFields(rows[rows.length - 1], rows.length - 1); 
     
    }


   
    document.getElementById("prevbutton").addEventListener("click", function() {
        moveToPrev();
        alert('displaying previous record');
    });
    
    document.getElementById("firstbutton").addEventListener("click",function(){
    	showFirst();
    	alert('first record');
    });
    document.getElementById("lastbutton").addEventListener("click",function(){
    	showLast();
    	alert('last record');
    });



    document.getElementById("nextButton").addEventListener("click", function() {
        moveToNext();
        alert('displaying next record');
    });
});
   
    
</script>
    
</body>
</html>emp.jsp,

crudserve.java

package emp;

import java.io.IOException;
import java.sql.SQLException;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

@WebServlet("/crudserve")
public class crudserve extends HttpServlet {
	private static final long serialVersionUID = 1L;

	public EmpDB db;

	public crudserve() {
		super();
		db = new EmpDB();

	}

	protected void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		String val = request.getParameter("action");
		if (val != null) {
			try {
				switch (val) {
				case "add":
					addEmployee(request, response);
					break;
				case "update":
					updateEmployee(request, response);
					break;
				case "delete":
					deleteEmployee(request, response);
					break;
				case "next":
					nextEmployee(request, response);
					break;
				case "previous":
					previousEmployee(request, response);
					break;
				case "first":
					first(request, response);
					break;

				case "last":
					last(request, response);
					break;

				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}

	private void nextEmployee(HttpServletRequest request, HttpServletResponse response)
			throws IOException, ServletException {
		request.getRequestDispatcher("Employees.jsp").forward(request, response);

	}

	private void previousEmployee(HttpServletRequest request, HttpServletResponse response)
			throws IOException, ServletException {
		request.getRequestDispatcher("Employees.jsp").forward(request, response);

	}

	private void first(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
		request.getRequestDispatcher("Employees.jsp").forward(request, response);

	}

	private void last(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
		request.getRequestDispatcher("Employees.jsp").forward(request, response);

	}

	private void addEmployee(HttpServletRequest request, HttpServletResponse response)
			throws IOException, SQLException {
		String name = request.getParameter("Empname");
		int id = Integer.parseInt(request.getParameter("Empid"));
		String job = request.getParameter("job");
		int department = Integer.parseInt(request.getParameter("Department"));
		int salary = Integer.parseInt(request.getParameter("Sal"));
		db.add(id, name, job, department, salary);

		response.sendRedirect("Empserve");
	}

	private void updateEmployee(HttpServletRequest request, HttpServletResponse response)
			throws IOException, SQLException {
		int id = Integer.parseInt(request.getParameter("Empid"));
		String name = request.getParameter("Empname");
		String job = request.getParameter("job");
		int department = Integer.parseInt(request.getParameter("Department"));
		int salary = Integer.parseInt(request.getParameter("Sal"));

		db.update(id, name, job, department, salary);

		response.sendRedirect("Empserve");

	}

	private void deleteEmployee(HttpServletRequest request, HttpServletResponse response)
			throws IOException, SQLException {
		int id = Integer.parseInt(request.getParameter("Empid"));
		System.out.println("Hi");
		db.delete(id);
		System.out.println("Hi");
		response.sendRedirect("Empserve");
	}

}crudserve.java

EmpDb.java


package emp;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class EmpDB {
	Connection con;

	public EmpDB() {
		try {
			Class.forName("org.postgresql.Driver");
			con = DriverManager.getConnection("jdbc:postgresql://192.168.110.48:5432/plf_training",
					"plf_training_admin", "pff123");
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public List<Employee> getAllEmp() {
		List<Employee> list = new ArrayList<>();
		try {
			Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
			ResultSet rs = st.executeQuery("select * from emp_crud");
			while (rs.next()) {
				Employee e = new Employee();
				e.setEmpid(rs.getInt("empid"));
				e.setDept(rs.getInt("deptid"));
				e.setEmp_name(rs.getString("emp_name"));
				e.setJob(rs.getString("job"));
				e.setSalary(rs.getInt("salary"));
				list.add(e);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return list;
	}

	public void add(int id, String name, String job, int department, int salary) throws SQLException {
		PreparedStatement pt = con
				.prepareStatement("insert into emp_crud (empid,emp_name,job,deptid,salary) values(?,?,?,?,?)");
		pt.setInt(1, id);
		pt.setString(2, name);
		pt.setString(3, job);
		pt.setInt(4, department);
		pt.setInt(5, salary);
		pt.execute();

	}

	public void update(int id, String name, String job, int department, int salary) throws SQLException {
		PreparedStatement pt = con
				.prepareStatement("update emp_crud set emp_name =?, job =?,deptid=?,salary=? where empid=?");
		pt.setInt(5, id);
		pt.setString(1, name);
		pt.setString(2, job);
		pt.setInt(3, department);
		pt.setInt(4, salary);
		pt.execute();
	}

	public void delete(int id) throws SQLException {
		PreparedStatement pt = con.prepareStatement("delete from emp_crud where empid=?");
		pt.setInt(1, id);
		pt.execute();
	}

}empDB.java

Employee.java

package emp;

public class Employee {
	private int empid;
	private String emp_name;
	private int dept;
	private String job;
	private int salary;

	public void setEmpid(int empid) {
		this.empid = empid;
	}

	public void setEmp_name(String emp_name) {
		this.emp_name = emp_name;
	}

	public void setDept(int dept) {
		this.dept = dept;
	}

	public void setJob(String job) {
		this.job = job;
	}

	public int getEmpid() {
		return empid;
	}

	public String getEmp_name() {
		return emp_name;
	}

	public int getDept() {
		return dept;
	}

	public String getJob() {
		return job;
	}

	public void setSalary(int salary) {
		this.salary = salary;
	}

	public int getSalary() {
		return salary;
	}
}, Empserve.java

package emp;

import java.io.IOException;
import java.util.List;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

@WebServlet("/Empserve")
public class Empserve extends HttpServlet {
	private static final long serialVersionUID = 1L;
	public EmpDB db;

	public void init() throws ServletException {
		super.init();
		db = new EmpDB();

	}

	public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {

		List<Employee> list = db.getAllEmp();
		request.setAttribute("ed", list);
		request.getRequestDispatcher("Employees.jsp").forward(request, response);

	}

}empserve.java